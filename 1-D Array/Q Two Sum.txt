//Q Two Sum
//Approach 1
// T C : 0(n2)
// S C : 0(1)
class Solution {
    public int[] twoSum(int[] nums, int target) {

        for(int i=0;i<nums.length;i++){

            for(int j=i+1;j<nums.length;j++){

                
                if(nums[i]+nums[j]==target){
                     int a[]={i,j};
                     return a;
                }
            }
            
        }
        return null;
        
    }
}

===============================================================================================
//Approach - 2 (Using Map)
// T C : 0(n)
// S C : 0(1)
class Solution {
    public int[] twoSum(int[] nums, int target) {

      int n = nums.length;

     Map<Integer,Integer> map = new HashMap<>();

     for(int i=0;i<n; i++){

         int rem = nums[i]-target;

         if(map.containsKey(rem)){

            return new int[]{map.get(rem),i};

         }
         map.put(nums[i],i);
     }
        return new int[]{};
    }

   }
 
